//: [Previous](@previous)

import Foundation

// Sets = Conjuntos
// S√£o uma forma de agrupar dados parecidas com arrays.
// ‚ö†Ô∏è A diferen√ßa √© que em conjuntos n√£o podemos ter dados duplicados!
// ‚ö†Ô∏è N√£o armazenam os itens em uma ordem espec√≠fica!

// Ele cria um array e atribui a um conjunto
// Ele vai remover todos dados duplicados e n√£o vai se lembrar da ordem exata
let people = Set(["Denzel Washington", "Tom Cruise", "Nicolas Cage", "Samuel L Jackson", "Samuel L Jackson"])
print(people)

// Segunda diferen√ßa: N√£o usamos append e sim INSERT

// insert: Adicioanndo dados a um conjunto
var people2 = Set<String>()
people2.insert("Denzel Washington")
people2.insert("Tom Cruise")
people2.insert("Nicolas Cage")
people2.insert("Samuel L Jackson")
print(people2)

// Vantagens em usar conjuntos:
// 1 - Armazenar dados √∫nicos: N√£o queremos nomes duplicados
// 2 - Os conjuntos armazenam dados em uma ordem altamente otimizada o que torna muito mais r√°pido localizar items

// Vamos supor que queremos usar um contains em um array de 1000 itens para identificar se existem um filme chamado "The Dark Knight"
// O array vai procurar em um por um at√© ler os 1000 itens e perceber que n√£o existe o filme e retornar falso.
// O conjunto √© executado t√£o r√°pido que voc√™ teria dificuldade de medir.
// ‚ö†Ô∏è mesmo se voc√™ tivesse um milh√£o de itens no conjunto, ou mesmo 10 milh√µes de itens, ele ainda seria executado instantaneamente, enquanto um array pode levar minutos ou mais para fazer o mesmo trabalho.

// üëÄ Na maioria das vezes, voc√™ usar√° matrizes em vez de conjuntos, mas √†s vezes ‚Äî s√≥ √†s vezes ‚Äî voc√™ descobrir√° que um conjunto √© exatamente a escolha certa para resolver um problema espec√≠fico, e far√° com que um c√≥digo lento seja executado em pouco tempo.

// Podemos usar: contains, sorted e cont
